local ls = require("luasnip")
local s = ls.snippet
local t = ls.text_node
local i = ls.insert_node

return {
    s("hi", {
        t("hello! its cpp")
    })
    ,
    s("??cp", {
        t({
        "#ifdef LOCAL",
		"    #include \"sv/base.hpp\"",
		"#else",
		"    #include <bits/stdc++.h>",
		"    // #include <ext/pb_ds/assoc_container.hpp>",
		"    // #include <ext/pb_ds/tree_policy.hpp>",
		"    using namespace std; ",
		"    // using namespace __gnu_pbds;",
		"    #define dbg(...) 69",
		"#endif",
		"",
		"typedef long long ll;",
		"typedef long double ld;",
		"typedef unsigned long long ull;",
		"",
		"typedef pair<int, int> pi;",
		"typedef pair<ll,ll> pl;",
		"typedef pair<ld,ld> pd;",
		"",
		"typedef vector<int> vi;",
		"typedef vector<ld> vd;",
		"typedef vector<ll> vl;",
		"typedef vector<pi> vpi;",
		"typedef vector<pl> vpl;",
		"//typedef vector<cd> vcd;",
		"typedef vector<string> vs;",
		"typedef vector<vector<string>> vvs;",
		"//#define vin vector<int> v(n);",
		"",
		"#define mp make_pair",
		"#define pb push_back",
		"#define ppb pop_back",
		"#define lb lower_bound",
		"#define ub upper_bound",
		"#define ff first",
		"#define ss second",
		"#define um unordered_map",
		"#define PI 3.1415926535897932384626",
		"",
		"#define all(x) (x).begin(), (x).end()",
		"//constexpr auto sz = [](const auto &container) -> ll { return ll(container.size()); };",
		"#define sz(s) ((int)s.size())",
		"#define trav(a,x) for (auto &a : x)",
		"const char nl = '\\n';",
		"",
		"template<typename T>",
		"istream& operator>>(istream& istream,vector<T>& v) { for (auto& it : v) cin >> it; return istream; }",
		"template <typename T_container,typename T = typename enable_if<!is_same<T_container,string>::value,typename T_container::value_type>::type>",
		"ostream& operator<<(ostream& os,const T_container& v) { string l; for (const T& x : v) os << l << x,l = \" \"; return os << '\\n'; };",
		"",
		"struct custom_hash {",
		"    static uint64_t splitmix64(uint64_t x) {",
		"        // http://xorshift.di.unimi.it/splitmix64.c",
		"        x += 0x9e3779b97f4a7c15;",
		"        x = (x ^ (x >> 30)) * 0xbf58476d1ce4e5b9;",
		"        x = (x ^ (x >> 27)) * 0x94d049bb133111eb;",
		"        return x ^ (x >> 31);",
		"    }",
		"",
		"    size_t operator()(uint64_t x) const {",
		"        static const uint64_t FIXED_RANDOM = chrono::steady_clock::now().time_since_epoch().count();",
		"        return splitmix64(x + FIXED_RANDOM);",
		"    }",
		"};",
		"",
		"constexpr ll INF = 1e18, MOD = 1e9+7, N = 1e5+10;",
		"",
		"// GNU PBDS (Number of elements less than k, kth element of set)",
		"// typedef tree<int, null_type,less<int>, rb_tree_tag,tree_order_statistics_node_update> ordered_set; /* Ordered Set */",
		"// typedef tree<int, null_type,less_equal<int>, rb_tree_tag,tree_order_statistics_node_update> ordered_multiset; /* Ordered MultiSet */",
		"// void oms_erase(ordered_multiset &t, int v) {int rank = t.order_of_key(v); ordered_multiset::iterator it = t.find_by_order(rank); t.erase(it);}",
		"",
		"/*",
		"-------------------------------------------------------------------------------------------------------------------------------------------------",
		"*/",
		"",
		"//solve",
		"void solve() {"
        }),
		i(1,"code"),
        t({
		"}",
		"",
		"//main",
		"int32_t main() {",
		"    ios::sync_with_stdio(false); cin.tie(nullptr);",
		"    //cout<<fixed<<setprecision(7);",
		"",
		"    int testcases = 1;",
		"    cin >> testcases;",
		"",
		"//testcases",
		"    while (testcases--) {",
		"        // cout <<",
		"        solve(); ",
        "        cout << '\\n';",
		"    }",
		"    //cout << endl;",
		"",
		"    return 0;",
		"}",
		""        
        })
    })
}
